"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_plugins_1 = require("@expo/config-plugins");
const NAVER_LAUNCH_SERVICE_QUERIES_SCHEMES = [
    'naversearchapp',
    'naversearchthirdlogin',
];
const NAVER_HEADER_IMPORT_STRING = '#import <NaverThirdPartyLogin/NaverThirdPartyLoginConnection.h>';
const createNaverLinkingString = (urlScheme) => `if ([url.scheme isEqualToString:@"${urlScheme}"]) {
    return [[NaverThirdPartyLoginConnection getSharedInstance] application:application openURL:url options:options];
  }`;
const modifyInfoPlist = (config, { urlScheme }) => {
    return (0, config_plugins_1.withInfoPlist)(config, (config) => {
        if (!Array.isArray(config.modResults.LSApplicationQueriesSchemes)) {
            config.modResults.LSApplicationQueriesSchemes =
                NAVER_LAUNCH_SERVICE_QUERIES_SCHEMES;
        }
        else {
            NAVER_LAUNCH_SERVICE_QUERIES_SCHEMES.forEach((scheme) => {
                if (!config.modResults.LSApplicationQueriesSchemes?.includes(scheme)) {
                    config.modResults.LSApplicationQueriesSchemes?.push(scheme);
                }
            });
        }
        if (!Array.isArray(config.modResults.CFBundleURLTypes)) {
            config.modResults.CFBundleURLTypes = [];
        }
        const isExist = config.modResults.CFBundleURLTypes.some((item) => item.CFBundleURLName === 'naver' &&
            item.CFBundleURLSchemes.includes(urlScheme));
        if (!isExist) {
            config.modResults.CFBundleURLTypes.push({
                CFBundleURLName: 'naver',
                CFBundleURLSchemes: [urlScheme],
            });
        }
        return config;
    });
};
const modifyContents = (contents, urlScheme) => {
    if (!contents.includes(NAVER_HEADER_IMPORT_STRING)) {
        contents = contents.replace('#import <React/RCTLinkingManager.h>', `#import <React/RCTLinkingManager.h>
${NAVER_HEADER_IMPORT_STRING}`);
    }
    const naverLinkingString = createNaverLinkingString(urlScheme);
    if (!contents.includes(naverLinkingString)) {
        contents = contents.replace('options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {', `options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
  ${naverLinkingString}
`);
    }
    return contents;
};
const modifyAppDelegate = (config, { urlScheme }) => {
    return (0, config_plugins_1.withAppDelegate)(config, async (config) => {
        if (['objc', 'objcpp'].includes(config.modResults.language)) {
            config.modResults.contents = modifyContents(config.modResults.contents, urlScheme);
        }
        else {
            config_plugins_1.WarningAggregator.addWarningIOS('withNaverLogin', 'Swift AppDelegate files are not supported yet.');
        }
        return config;
    });
};
const withNaverLogin = (config, props) => {
    config = modifyInfoPlist(config, props);
    config = modifyAppDelegate(config, props);
    return config;
};
exports.default = withNaverLogin;
